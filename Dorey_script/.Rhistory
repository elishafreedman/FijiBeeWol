# Read in the nexus file
FjHoma <- apex::read.multiFASTA("2018_Fiji_Homalictus.fasta")
# Data can be visualised here, but what a mess!
# plot(FjHoma)
# Set locus name because why not
(apex::setLocusNames(FjHoma) <- "COI")
# Create genind object
FjHoma_genInd <- apex::multidna2genind(FjHoma, mlst = FALSE,
genes = "COI")
##### 1.2 Prep. occurrences + DNA ####
# Read in the occurrence data
OccData <- readr::read_csv(paste0(RootPath, "/HomalictusCollectionData_2018.csv"),
col_types = readr::cols(.default = "c"))
# Match the species to the collection data
matched <- OccData %>%
dplyr::right_join(tibble::tibble(labels = FjHoma@labels,
# Set rownumbers to sort by
rownum = row_number(FjHoma@labels)),
by = c("Sequence_name" = "labels")) %>%
# Sort the matched occs
dplyr::arrange(rownum)
# Add the species names and codes to the genind object
strata(FjHoma_genInd) <- matched %>%
# select wanted columns
dplyr::select(Specimen_code, Species_name) %>%
# Make new tibble with this info
dplyr::rename(
sequence = Specimen_code,
populations = Species_name) %>%
dplyr::mutate(species = populations) %>%
data.frame()
setPop(FjHoma_genInd) <- ~populations
###### a. Filter sample size ####
# Filter for sample size
Species2remove <- table(FjHoma_genInd@pop) %>% data.frame() %>%
tibble::tibble() %>%
# sample size greater than 2
dplyr::filter(Freq < 3)
# Choose individuals to remove
individuals2remove <- FjHoma_genInd@strata %>%
dplyr::right_join(Species2remove, by = c("species" = "Var1"))
# Remove those individuals
FjHoma_genInd <- FjHoma_genInd[!FjHoma_genInd@strata$sequence %in% individuals2remove$sequence]
##### 1.3 genetic analyses ####
###### a. Gst ####
# Undertake a pairwise Gst Nei analysis
gst <- mmod::pairwise_Gst_Nei(FjHoma_genInd) %>%
as.matrix() %>%
round(3) %>%
write.csv(paste0(RootPath, "/mmod_Gst_Nei.csv"))
###### b. FST ####
# Undertake pairwise Fst
hierfstat::genet.dist(FjHoma_genInd, method = "Nei87")
Fst_Homa <- hierfstat::pairwise.neifst(dat = FjHoma_genInd, diploid = FALSE) %>%
# Convert to dataframe
data.frame() %>%
round(3)
colnames(Fst_Homa) <- rownames(Fst_Homa)
#### 1.4 Diversity Indexces ####
# Read in the sheet with the infected/not infected individuals (all tested)
wolbachiaInfected = readr::read_csv("Wolbachia_PositiveNagative.csv")
###### a. calculate ####
# Use the genetic information in the matched dataframe to get haplotype statistics
FJHoma_haplotypes <- matched %>%
# !!! OPTIONAL filter to ONLY Wolbachia individuals
#dplyr::filter(Specimen_code %in% wolbachiaInfected$seqCode) %>%
# Group by species name
# !!! OPTIONAL remove fijiensis
#dplyr::filter(!Species_name == "Lasioglossum (Homalictus) fijiensis") %>%
dplyr::group_by(Species_name) %>%
# Get counts of each haplotype
dplyr::count(Sequence) %>%
# remove the Sequence column as it's not needed for the stats
dplyr::select(!Sequence) %>%
# Add row numbers to make them unique
mutate(row = row_number()) %>%
# Pivot the tible wider so that each species has it's own column with haplotype counts
tidyr::pivot_wider(names_from = Species_name,
values_from = n,
values_fill = 0)
# Set up formulae from ShannonGen as functions
# Zahl_1977
Z = function(X) {
X = X[X > 0]
Y = X[X > 1]
n = sum(X)
-n * sum(X/n * log(X/n)) - (n - 1)/n * sum((n - X) *
(-X/(n - 1) * log(X/(n - 1)))) - (n - 1)/n * sum(-Y *
(Y - 1)/(n - 1) * log((Y - 1)/(n - 1)))
}
# Shannon_1949
MLE = function(X) {
X = X[X > 0]
n = sum(X)
-sum(X/n * log(X/n))
}
# Calculate the statistics
out_Zahl_1977 <- apply(FJHoma_haplotypes, MARGIN = 2, FUN = Z)
out_Shannon_1949 <- apply(FJHoma_haplotypes, MARGIN = 2, FUN = MLE)
# Remove the row column
FJHoma_haplotypes <- FJHoma_haplotypes %>%
dplyr::select(!row)
FJHoma_haplotypes
View(FJHoma_haplotypes)
FJHoma_haplotypes[[1]]
outCombined_longer
# Combine the statistics
outCombined <- dplyr::bind_cols(names(out_Zahl_1977), out_Zahl_1977, out_Shannon_1949) %>%
# Set the column names
setNames(c("Species_name", "Zahl", "Shannon")) %>%
# Remove the "row" statistic
dplyr::filter(!Species_name == "row") %>%
# Add haplotype counts
dplyr::left_join(matched %>%
# Group by species name
dplyr::group_by(Species_name) %>%
dplyr::distinct(Sequence, .keep_all = TRUE) %>%
# Get counts of each haplotype
dplyr::count(., name = "haplotypeCount"),
by = "Species_name") %>%
# Add sequence counts
dplyr::left_join(matched %>%
# Group by species name
dplyr::group_by(Species_name) %>%
# Get counts of each haplotype
dplyr::count(name = "sequenceCount"),
by = "Species_name") %>%
# Add Wolbachia infection status
dplyr::mutate(WolbachiaDetected = dplyr::if_else(
Species_name %in% c("Lasioglossum (Homalictus) ostridorsum", "Lasioglossum (Homalictus) kaicolo",  "Lasioglossum (Homalictus) hadrander",
"Lasioglossum (Homalictus) groomi",  "Lasioglossum (Homalictus) fijiensis",   "Lasioglossum (Homalictus) concavus",
"Lasioglossum (Homalictus) atritergus",  "Lasioglossum (Homalictus) sp. S",   "Lasioglossum (Homalictus) sp. F",
"Lasioglossum (Homalictus) sp. M",  "Lasioglossum (Homalictus) sp. R" ),
"Infected", "Unknown")) %>%
dplyr::left_join(Chao1 %>%
dplyr::select(species, Estimate) %>%
dplyr::rename(ChaoEstimate = Estimate) %>%
dplyr::mutate(log_ChaoEstimate = log(ChaoEstimate)),
by = c("Species_name" = "species"))
outCombined_longer <- outCombined %>%
dplyr::select(!c("haplotypeCount","sequenceCount")) %>%
tidyr::pivot_longer(cols = c("Zahl","Shannon", "log_ChaoEstimate")) %>%
dplyr::arrange(desc(value)) %>%
dplyr::arrange(WolbachiaDetected) %>%
dplyr::group_by(WolbachiaDetected) %>%
# Change 0 to NA
dplyr::mutate(value = dplyr::if_else(value == 0,
NA_integer_, value)) %>%
# Drop na values for Shannon and Zahl
tidyr::drop_na(value)
# cClculate diversity indices from ChaoSpecies
ChaoResults <- ChaoWrapper(data = FJHoma_haplotypes)
ChaoResults$basicTable %>% readr::write_csv("basicChaoOutputs.csv")
ChaoResults$diversityTable %>% readr::write_csv("diversityChaoOutputs.csv")
# Get the estimates of Chao1
Chao1 <- ChaoResults$diversityTable %>% dplyr::filter(Name == "Chao1 (Chao, 1984)")
# Remove the row column
FJHoma_haplotypes <- FJHoma_haplotypes %>%
dplyr::select(!row)
FJHoma_haplotypes
# Remove the row column
FJHoma_haplotypes <- FJHoma_haplotypes
# cClculate diversity indices from ChaoSpecies
ChaoResults <- ChaoWrapper(data = FJHoma_haplotypes)
ChaoResults$basicTable %>% readr::write_csv("basicChaoOutputs.csv")
source("ChaoWrapper.R")
# Remove the row column
FJHoma_haplotypes <- FJHoma_haplotypes %>%
dplyr::select(!row)
# Remove the row column
FJHoma_haplotypes <- FJHoma_haplotypes
# cClculate diversity indices from ChaoSpecies
ChaoResults <- ChaoWrapper(data = FJHoma_haplotypes)
ChaoResults$basicTable %>% readr::write_csv("basicChaoOutputs.csv")
ChaoResults$diversityTable %>% readr::write_csv("diversityChaoOutputs.csv")
# Get the estimates of Chao1
Chao1 <- ChaoResults$diversityTable %>% dplyr::filter(Name == "Chao1 (Chao, 1984)")
# Combine the statistics
outCombined <- dplyr::bind_cols(names(out_Zahl_1977), out_Zahl_1977, out_Shannon_1949) %>%
# Set the column names
setNames(c("Species_name", "Zahl", "Shannon")) %>%
# Remove the "row" statistic
dplyr::filter(!Species_name == "row") %>%
# Add haplotype counts
dplyr::left_join(matched %>%
# Group by species name
dplyr::group_by(Species_name) %>%
dplyr::distinct(Sequence, .keep_all = TRUE) %>%
# Get counts of each haplotype
dplyr::count(., name = "haplotypeCount"),
by = "Species_name") %>%
# Add sequence counts
dplyr::left_join(matched %>%
# Group by species name
dplyr::group_by(Species_name) %>%
# Get counts of each haplotype
dplyr::count(name = "sequenceCount"),
by = "Species_name") %>%
# Add Wolbachia infection status
dplyr::mutate(WolbachiaDetected = dplyr::if_else(
Species_name %in% c("Lasioglossum (Homalictus) ostridorsum", "Lasioglossum (Homalictus) kaicolo",  "Lasioglossum (Homalictus) hadrander",
"Lasioglossum (Homalictus) groomi",  "Lasioglossum (Homalictus) fijiensis",   "Lasioglossum (Homalictus) concavus",
"Lasioglossum (Homalictus) atritergus",  "Lasioglossum (Homalictus) sp. S",   "Lasioglossum (Homalictus) sp. F",
"Lasioglossum (Homalictus) sp. M",  "Lasioglossum (Homalictus) sp. R" ),
"Infected", "Unknown")) %>%
dplyr::left_join(Chao1 %>%
dplyr::select(species, Estimate) %>%
dplyr::rename(ChaoEstimate = Estimate) %>%
dplyr::mutate(log_ChaoEstimate = log(ChaoEstimate)),
by = c("Species_name" = "species"))
outCombined_longer <- outCombined %>%
dplyr::select(!c("haplotypeCount","sequenceCount")) %>%
tidyr::pivot_longer(cols = c("Zahl","Shannon", "log_ChaoEstimate")) %>%
dplyr::arrange(desc(value)) %>%
dplyr::arrange(WolbachiaDetected) %>%
dplyr::group_by(WolbachiaDetected) %>%
# Change 0 to NA
dplyr::mutate(value = dplyr::if_else(value == 0,
NA_integer_, value)) %>%
# Drop na values for Shannon and Zahl
tidyr::drop_na(value)
outCombined_longer
outCombined_plot_Stats
###### d. mean plots ####
# make the data sets for the statistics and for the sampling
outCombined_plot_Stats <- outCombined_complete %>%
dplyr::mutate(rowNum = row_number()) %>%
tidyr::pivot_longer(
cols =  c("Zahl", "Shannon", "log_ChaoEstimate", "haplotypeCount", "sequenceCount")) %>%
dplyr::filter(name %in% c("Zahl", "Shannon", "log_ChaoEstimate"))
###### c. shapiro.test ####
# Remove NA from outCombined
outCombined_complete <- outCombined %>%
dplyr::filter(!c(is.na(Zahl) | is.na(Shannon)| Zahl == 0 | Shannon == 0 ) )
readr::write_csv(outCombined_complete, "outCombined_complete.csv")
# Test normality
shapiro.test(outCombined_complete$Zahl)
shapiro.test(outCombined_complete$Shannon)
shapiro.test(outCombined_complete$log_ChaoEstimate)
shapiro.test(outCombined_complete$haplotypeCount)
shapiro.test(outCombined_complete$sequenceCount)
# Get subsets of Unknown and Infected data
UnknownDF <- outCombined_complete %>%
dplyr::filter(WolbachiaDetected == "Unknown")
InfectedDF <- outCombined_complete %>%
dplyr::filter(WolbachiaDetected == "Infected")
# Calculate p-values
# Wilcoxon rank sum test (equivalent to the Mann-Whitney test: see the Note) is carried out
ZahlP <- wilcox.test(UnknownDF$Zahl, InfectedDF$Zahl, alternative = "two.sided", paired = FALSE,
exact = FALSE, conf.int = TRUE)
ShannonP <- wilcox.test(UnknownDF$Shannon, InfectedDF$Shannon, alternative = "two.sided", paired = FALSE,
exact = FALSE)
ChaoEstimateP <- wilcox.test(UnknownDF$log_ChaoEstimate, InfectedDF$log_ChaoEstimate,
alternative = "two.sided", paired = FALSE,
exact = FALSE)
sequenceCountP <- wilcox.test(UnknownDF$sequenceCount, InfectedDF$sequenceCount, alternative = "two.sided", paired = FALSE,
exact = FALSE)
haplotypeCountP <- wilcox.test(UnknownDF$haplotypeCount, InfectedDF$haplotypeCount, alternative = "two.sided", paired = FALSE,
exact = FALSE)
# Combine t-test outputs into a table
W_testOutput <- tibble::tibble(
name = c("Zahl", "Shannon", "ChaoEstimate", "sequenceCount", "haplotypeCount"),
#diffInLocation = c(ZahlP$estimate[1], ShannonP$estimate[1], sequenceCountP$estimate[1], haplotypeCountP$estimate[1]),
W_statistic = c(ZahlP$statistic, ShannonP$statistic, ChaoEstimateP$statistic,
sequenceCountP$statistic, haplotypeCountP$statistic),
#df = c(ZahlP$parameter, ShannonP$parameter, sequenceCountP$parameter, haplotypeCountP$parameter),
p_value = c(ZahlP$p.value, ShannonP$p.value, ChaoEstimateP$p.value,
sequenceCountP$p.value, haplotypeCountP$p.value)
)
###### d. mean plots ####
# make the data sets for the statistics and for the sampling
outCombined_plot_Stats <- outCombined_complete %>%
dplyr::mutate(rowNum = row_number()) %>%
tidyr::pivot_longer(
cols =  c("Zahl", "Shannon", "log_ChaoEstimate", "haplotypeCount", "sequenceCount")) %>%
dplyr::filter(name %in% c("Zahl", "Shannon", "log_ChaoEstimate"))
# sampling
outCombined_plot_Sampling <- outCombined_complete %>%
dplyr::mutate(rowNum = row_number()) %>%
tidyr::pivot_longer(
cols =  c("Zahl", "Shannon", "log_ChaoEstimate", "haplotypeCount", "sequenceCount")) %>%
dplyr::filter(name %in% c("haplotypeCount", "sequenceCount"))
outCombined_plot_Stats
#### 0.0 Script preparation ####
# Install BeeDC
# When prompted, just hit enter for updates.
remotes::install_github("https://github.com/jbdorey/BeeDC.git", user="jbdorey",
ref = "main",
auth_token = "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")
##### 0.1 Working directory ####
# Choose the path to the root folder in which all other folders can be found (or made by dirMaker)
RootPath <- "/Users/jamesdorey/Desktop/Uni/My_papers/Bee_SDM_paper"
# Load in this initial packae
library(magrittr)
# Create file paths and prepare for what's to come
dirMaker(
RootPath = RootPath,
# Input the location of the workflow script RELATIVE to the RootPath
RDoc = "BDC_repo/BeeCleaning_SciData.R") %>%
# Add paths created by this function to the .GlobalEnv
list2env(envir = .GlobalEnv)
# Create file paths and prepare for what's to come
BeeDC::dirMaker(
RootPath = RootPath,
# Input the location of the workflow script RELATIVE to the RootPath
RDoc = "BDC_repo/BeeCleaning_SciData.R") %>%
# Add paths created by this function to the .GlobalEnv
list2env(envir = .GlobalEnv)
##### 0.1 Working directory ####
# Choose the path to the root folder in which all other folders can be found (or made by dirMaker)
RootPath <- "/Users/jamesdorey/Desktop/Uni/My_papers/Bee_SDM_paper"
# Load in this initial packae
library(magrittr)
# Create file paths and prepare for what's to come
BeeDC::dirMaker(
RootPath = RootPath,
# Input the location of the workflow script RELATIVE to the RootPath
RDoc = "BDC_repo/BeeCleaning_SciData.R") %>%
# Add paths created by this function to the .GlobalEnv
list2env(envir = .GlobalEnv)
# Create file paths and prepare for what's to come
BeeDC::dirMaker(
RootPath = RootPath,
# Input the location of the workflow script RELATIVE to the RootPath
RDoc = "/Users/jamesdorey/Desktop/Uni/Packages/BeeDC/BeeCleaning_SciData.R") %>%
# Add paths created by this function to the .GlobalEnv
list2env(envir = .GlobalEnv)
# Create file paths and prepare for what's to come
BeeDC::dirMaker(
RootPath = RootPath,
# Input the location of the workflow script RELATIVE to the RootPath
RDoc = "Uni/Packages/BeeDC/BeeCleaning_SciData.R") %>%
# Add paths created by this function to the .GlobalEnv
list2env(envir = .GlobalEnv)
# Create file paths and prepare for what's to come
BeeDC::dirMaker(
RootPath = RootPath,
# Input the location of the workflow script RELATIVE to the RootPath
RDoc = "/Uni/Packages/BeeDC/BeeCleaning_SciData.R") %>%
# Add paths created by this function to the .GlobalEnv
list2env(envir = .GlobalEnv)
# Create file paths and prepare for what's to come
BeeDC::dirMaker(
RootPath = RootPath,
# Input the location of the workflow script RELATIVE to the RootPath
RDoc = "Packages/BeeDC/BeeCleaning_SciData.R") %>%
# Add paths created by this function to the .GlobalEnv
list2env(envir = .GlobalEnv)
# Create file paths and prepare for what's to come
BeeDC::dirMaker(
RootPath = RootPath,
# Input the location of the workflow script RELATIVE to the RootPath
RDoc = "BeeDC/BeeCleaning_SciData.R") %>%
# Add paths created by this function to the .GlobalEnv
list2env(envir = .GlobalEnv)
# Create file paths and prepare for what's to come
BeeDC::dirMaker(
RootPath = RootPath,
# Input the location of the workflow script RELATIVE to the RootPath
RDoc = "Packages/BeeDC/BeeCleaning_SciData.R") %>%
# Add paths created by this function to the .GlobalEnv
list2env(envir = .GlobalEnv)
# Set the working directory
setwd(DataPath)
# Install reenv, IF NEEDED
#install.packages("renv")
renv::init()
##### 0.2 Install packages (if needed) #####
# Install only those packages that are not already present in your system
# Choose packages that need to be installed
# You may need to install gdal on your computer. This can be done on mac by using
# Homebrew in the terminal and the command "brew install gdal"
list.of.packages <- c("R.utils",           # To use gunzip
"bdc",               # data cleaning package
"tidyr",             #  Part of the tidyverse
"magrittr",          # to use pipes
"ggplot2",           #  Creates many easthetic plots
#"ggVennDiagram",     # Extends ggplot2 to make venn diagrams
"dplyr",             #  Part of the tidyverse
"tibble",            # To use tibbles
"forcats",           # tidyverse for working with factors
"rlist",             # Package to save lists
"galah",             #  To download ALA data
"praise",            #  To whispers sweet nothings
"EML",               #  To work with .eml files
"emld",              #  To work with .eml files
"rlang",             #  Part of the tidyverse — core functions
"xml2",              #  Part of the tidyverse — reads .xml files
"stringr",           #  Part of the tidyverse — works with text strings
"lubridate",         #  Part of the tidyverse — works with dates
"tidyselect",        #  Part of the tidyverse
"mgsub",             #  To perform multiple text substitutions
"rvest",             # Package for interfacing with and downloading from the internet
"rnaturalearth",     #  Global vector map data
"rnaturalearthdata", #  To access the above global map data
"countrycode",       # Package to deal with country codes
"rangeBuilder",
"rworldmap",
"janitor",
"hexbin",
"circlize",
"BiocManager",
"ComplexHeatmap",
"paletteer",
"readxl",
"readr",             #  Part of the tidyverse — reads files (e.g., .csv)
"cowplot",           # ggplot2 helper package
"igraph",
"ggspatial")        #  Makes ggplot2 create north arrows or scale bars
##### 0.3 Load packages ####
# Load all packages from the list specified above, with the addition of "rnaturalearthhires"
lapply(c(list.of.packages, "rnaturalearthhires", "chorddiag", "sf","terra"),
library, character.only = TRUE)
##### 0.2 Install packages (if needed) #####
# Install only those packages that are not already present in your system
# Choose packages that need to be installed
# You may need to install gdal on your computer. This can be done on mac by using
# Homebrew in the terminal and the command "brew install gdal"
list.of.packages <- c("R.utils",           # To use gunzip
"bdc",               # data cleaning package
"tidyr",             #  Part of the tidyverse
"magrittr",          # to use pipes
"ggplot2",           #  Creates many easthetic plots
#"ggVennDiagram",     # Extends ggplot2 to make venn diagrams
"dplyr",             #  Part of the tidyverse
"tibble",            # To use tibbles
"forcats",           # tidyverse for working with factors
"rlist",             # Package to save lists
"galah",             #  To download ALA data
"praise",            #  To whispers sweet nothings
"EML",               #  To work with .eml files
"emld",              #  To work with .eml files
"rlang",             #  Part of the tidyverse — core functions
"xml2",              #  Part of the tidyverse — reads .xml files
"stringr",           #  Part of the tidyverse — works with text strings
"lubridate",         #  Part of the tidyverse — works with dates
"tidyselect",        #  Part of the tidyverse
"mgsub",             #  To perform multiple text substitutions
"rvest",             # Package for interfacing with and downloading from the internet
"rnaturalearth",     #  Global vector map data
"rnaturalearthdata", #  To access the above global map data
"countrycode",       # Package to deal with country codes
"rangeBuilder",
"rworldmap",
"janitor",
"hexbin",
"circlize",
"BiocManager",
"ComplexHeatmap",
"paletteer",
"readxl",
"readr",             #  Part of the tidyverse — reads files (e.g., .csv)
"cowplot",           # ggplot2 helper package
"igraph",
"ggspatial")        #  Makes ggplot2 create north arrows or scale bars
##### 0.3 Load packages ####
# Load all packages from the list specified above, with the addition of "rnaturalearthhires"
lapply(c(list.of.packages, "rnaturalearthhires", "chorddiag", "sf","terra"),
library, character.only = TRUE)
#### 0.0 Script preparation ####
# Install BeeDC
# When prompted, just hit enter for updates.
remotes::install_github("https://github.com/jbdorey/BeeDC.git", user="jbdorey",
ref = "main",
auth_token = "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")
##### 0.1 Working directory ####
# Choose the path to the root folder in which all other folders can be found (or made by dirMaker)
RootPath <- "/Users/jamesdorey/Desktop/Uni/My_papers/Bee_SDM_paper"
# Load in this initial packae
library(magrittr)
# Create file paths and prepare for what's to come
BeeDC::dirMaker(
RootPath = RootPath,
# Input the location of the workflow script RELATIVE to the RootPath
RDoc = "Packages/BeeDC/BeeCleaning_SciData.R") %>%
# Add paths created by this function to the .GlobalEnv
list2env(envir = .GlobalEnv)
# Set the working directory
setwd(DataPath)
# Install reenv, IF NEEDED
#install.packages("renv")
renv::init()
#### 0.0 Script preparation ####
# Install BeeDC
# When prompted, just hit enter for updates.
remotes::install_github("https://github.com/jbdorey/BeeDC.git", user="jbdorey",
ref = "main",
auth_token = "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")
##### 0.1 Working directory ####
# Choose the path to the root folder in which all other folders can be found (or made by dirMaker)
RootPath <- "/Users/jamesdorey/Desktop/Uni/My_papers/Bee_SDM_paper"
# Load in this initial packae
library(magrittr)
# Create file paths and prepare for what's to come
BeeDC::dirMaker(
RootPath = RootPath,
# Input the location of the workflow script RELATIVE to the RootPath
RDoc = "Packages/BeeDC/BeeCleaning_SciData.R") %>%
# Add paths created by this function to the .GlobalEnv
list2env(envir = .GlobalEnv)
# Create file paths and prepare for what's to come
BeeDC::dirMaker(
RootPath = RootPath,
# Input the location of the workflow script RELATIVE to the RootPath
RDoc = "Packages/BeeDC/BeeDC_fullWorkflow.R") %>%
# Add paths created by this function to the .GlobalEnv
list2env(envir = .GlobalEnv)
# Set the working directory
setwd(DataPath)
# Install reenv, IF NEEDED
#install.packages("renv")
renv::init()
