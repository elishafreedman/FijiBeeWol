RootPath <- "/Users/jamesdorey/Desktop/Uni/My_papers/Elisha_Hons_paper/Honours/Dorey_script"
# Set the working directory
setwd(RootPath)
# Install reenv, IF NEEDED
#install.packages("renv")
renv::init()
##### 0.2 Install packages (if needed) #####
# Install only those packages that are not already present in your system
# Choose packages that need to be installed
# You may need to install gdal on your computer. This can be done on mac by using
# Homebrew in the terminal and the command "brew install gdal"
list.of.packages <- c("pegas",
"apex",
"geodata",
"dplyr",             #  Part of the tidyverse
"adegenet",
"mmod",
"poppr",
"hierfstat",         # For genetics statistics
"readr",
"rnaturalearth",
"rnaturalearthdata",
"maps",
"terra",
"cowplot",
"magrittr",          # to use pipes
#"ggVennDiagram",     # Extends ggplot2 to make venn diagrams
"tibble",            # To use tibbles
"forcats",           # tidyverse for working with factors
"tidyr",             #  Part of the tidyverse)
"tidyselect",        #  Part of the tidyverse
"geodata",
"tidyterra",
"ggspatial")         #  Makes ggplot2 create north arrows or scale bars
# List the new (not installed) packages and then if there are any, install them.
renv::install(packages = c(list.of.packages),
rebuild = FALSE) # try changing to TRUE if you're having package troubles
# Install reenv, IF NEEDED
#install.packages("renv")
renv::init()
##### 0.2 Install packages (if needed) #####
# Install only those packages that are not already present in your system
# Choose packages that need to be installed
# You may need to install gdal on your computer. This can be done on mac by using
# Homebrew in the terminal and the command "brew install gdal"
list.of.packages <- c("pegas",
"apex",
"geodata",
"dplyr",             #  Part of the tidyverse
"adegenet",
"mmod",
"poppr",
"hierfstat",         # For genetics statistics
"readr",
"rnaturalearth",
"rnaturalearthdata",
"maps",
"terra",
"cowplot",
"magrittr",          # to use pipes
#"ggVennDiagram",     # Extends ggplot2 to make venn diagrams
"tibble",            # To use tibbles
"forcats",           # tidyverse for working with factors
"tidyr",             #  Part of the tidyverse)
"tidyselect",        #  Part of the tidyverse
"geodata",
"tidyterra",
"ggspatial")         #  Makes ggplot2 create north arrows or scale bars
# List the new (not installed) packages and then if there are any, install them.
renv::install(packages = c(list.of.packages),
rebuild = FALSE) # try changing to TRUE if you're having package troubles
##### 0.3 Load packages ####
# Load all packages from the list specified above
lapply(c(list.of.packages),
library, character.only = TRUE)
# Save a snapshot of the environment
renv::snapshot()
#### 1. COI ####
##### 1.1 Prep. DNA ####
# Read in the nexus file
FjHoma <- apex::read.multiFASTA("2018_Fiji_Homalictus.fasta")
# Data can be visualised here, but what a mess!
# plot(FjHoma)
# Set locus name because why not
(apex::setLocusNames(FjHoma) <- "COI")
# Create genind object
FjHoma_genInd <- apex::multidna2genind(FjHoma, mlst = TRUE)
FjHoma
?shannon
FjHoma_genInd
FjHoma_genInd
FjHoma_genInd
genobject = FjHoma_genInd
###### c. Shannon's Index ####
TEST <- polysat::genotypeDiversity(
genobject = FjHoma_genInd
)
?gen2polysat
??gen2polysat
?as.genambig
###### c. Shannon's Index ####
FJHoma_genambig <- poppr::as.genambig(FjHoma_genInd)
warnings()
FjHoma_genInd
FJHoma_genambig
FJHoma_genambig@Missing
FJHoma_genambig@Ploidies
FJHoma_genambig@PopNames
FJHoma_genambig@PopInfo
##### 1.2 Prep. occurrences + DNA ####
# Read in the occurrence data
OccData <- readr::read_csv(paste0(RootPath, "/HomalictusCollectionData_2018.csv"),
col_types = readr::cols(.default = "c"))
# Match the species to the collection data
matched <- OccData %>%
dplyr::right_join(tibble::tibble(labels = FjHoma@labels,
# Set rownumbers to sort by
rownum = row_number(FjHoma@labels)),
by = c("Sequence_name" = "labels")) %>%
# Sort the matched occs
dplyr::arrange(rownum)
# Add the species names and codes to the genind object
strata(FjHoma_genInd) <- matched %>%
# select wanted columns
dplyr::select(Specimen_code, Species_name) %>%
# Make new tibble with this info
dplyr::rename(
sequence = Specimen_code,
populations = Species_name) %>%
dplyr::mutate(species = populations) %>%
data.frame()
setPop(FjHoma_genInd) <- ~populations
###### a. Filter sample size ####
# Filter for sample size
Species2remove <- table(FjHoma_genInd@pop) %>% data.frame() %>%
tibble::tibble() %>%
# sample size greater than 2
dplyr::filter(Freq < 3)
# Choose individuals to remove
individuals2remove <- FjHoma_genInd@strata %>%
dplyr::right_join(Species2remove, by = c("species" = "Var1"))
# Remove those individuals
FjHoma_genInd <- FjHoma_genInd[!FjHoma_genInd@strata$sequence %in% individuals2remove$sequence]
FjHoma_genInd
# Create genind object
FjHoma_genInd <- apex::multidna2genind(FjHoma, mlst = TRUE)
##### 1.2 Prep. occurrences + DNA ####
# Read in the occurrence data
OccData <- readr::read_csv(paste0(RootPath, "/HomalictusCollectionData_2018.csv"),
col_types = readr::cols(.default = "c"))
# Match the species to the collection data
matched <- OccData %>%
dplyr::right_join(tibble::tibble(labels = FjHoma@labels,
# Set rownumbers to sort by
rownum = row_number(FjHoma@labels)),
by = c("Sequence_name" = "labels")) %>%
# Sort the matched occs
dplyr::arrange(rownum)
# Add the species names and codes to the genind object
strata(FjHoma_genInd) <- matched %>%
# select wanted columns
dplyr::select(Specimen_code, Species_name) %>%
# Make new tibble with this info
dplyr::rename(
sequence = Specimen_code,
populations = Species_name) %>%
dplyr::mutate(species = populations) %>%
data.frame()
setPop(FjHoma_genInd) <- ~populations
FjHoma_genInd
Species2remove
individuals2remove
###### c. Shannon's Index ####
FJHoma_genambig <- poppr::as.genambig(FjHoma_genInd)
FJHoma_genambig@PopNames
FJHoma_genambig@PopInfo
###### c. Shannon's Index ####
FJHoma_genambig <- poppr::as.genambig(FjHoma_genInd)
warnings()
?genotypeDiversity
?Samples
?meandistance.matrix
polysat::meandistance.matrix(polysat)
polysat::meandistance.matrix(FJHoma_genambig)
TEST <- polysat::genotypeDiversity(
genobject = FJHoma_genambig, samples = polysat::Samples(FJHoma_genambig),
loci = polysat::Loci(FJHoma_genambig),
d = polysat::meandistance.matrix(FJHoma_genambig,
samples = polysat::Samples(FJHoma_genambig),
loci = polysat::Loci(FJHoma_genambig),
distmetric = Bruvo.distance, progress = TRUE),
index = Shannon
)
?Bruvo.distance
TEST <- polysat::genotypeDiversity(
genobject = FJHoma_genambig, samples = polysat::Samples(FJHoma_genambig),
loci = polysat::Loci(FJHoma_genambig),
d = polysat::meandistance.matrix(FJHoma_genambig,
samples = polysat::Samples(FJHoma_genambig),
loci = polysat::Loci(FJHoma_genambig),
distmetric = polysat::Bruvo.distance(), progress = TRUE),
index = Shannon
)
TEST <- polysat::genotypeDiversity(
genobject = FJHoma_genambig, samples = polysat::Samples(FJHoma_genambig),
loci = polysat::Loci(FJHoma_genambig),
d = polysat::meandistance.matrix(FJHoma_genambig,
samples = polysat::Samples(FJHoma_genambig),
loci = polysat::Loci(FJHoma_genambig),
distmetric = polysat::Bruvo.distance, progress = TRUE),
index = Shannon
)
TEST <- polysat::genotypeDiversity(
genobject = FJHoma_genambig, samples = polysat::Samples(FJHoma_genambig),
loci = polysat::Loci(FJHoma_genambig),
#d = polysat::meandistance.matrix(FJHoma_genambig,
#                                 samples = polysat::Samples(FJHoma_genambig),
#                                 loci = polysat::Loci(FJHoma_genambig),
#                                 distmetric = polysat::Bruvo.distance, progress = TRUE),
index = Shannon
)
TEST <- polysat::genotypeDiversity(
genobject = FJHoma_genambig, samples = polysat::Samples(FJHoma_genambig),
loci = polysat::Loci(FJHoma_genambig),
#d = polysat::meandistance.matrix(FJHoma_genambig,
#                                 samples = polysat::Samples(FJHoma_genambig),
#                                 loci = polysat::Loci(FJHoma_genambig),
#                                 distmetric = polysat::Bruvo.distance, progress = TRUE),
index = polysat::Shannon()
)
?Shannon
distances <- polysat::meandistance.matrix(FJHoma_genambig,
samples = polysat::Samples(FJHoma_genambig),
loci = polysat::Loci(FJHoma_genambig),
distmetric = polysat::Bruvo.distance, progress = TRUE,
all.distances=TRUE),
distances <- polysat::meandistance.matrix(FJHoma_genambig,
samples = polysat::Samples(FJHoma_genambig),
loci = polysat::Loci(FJHoma_genambig),
distmetric = polysat::Bruvo.distance, progress = TRUE,
all.distances=TRUE)
distances <- polysat::meandistance.matrix(FJHoma_genambig,
samples = polysat::Samples(FJHoma_genambig),
loci = polysat::Loci(FJHoma_genambig),
distmetric = polysat::Bruvo.distance, progress = TRUE,
all.distances=TRUE)
polysat::Samples(FJHoma_genambig)
polysat::Loci(FJHoma_genambig)
?Usatnts
FJHoma_genambig@Usatnts
Usatnts(FJHoma_genambig)
polysat::Usatnts(FJHoma_genambig)
distances <- polysat::meandistance.matrix(FJHoma_genambig,
samples = polysat::Samples(FJHoma_genambig),
loci = polysat::Loci(FJHoma_genambig),
distmetric = polysat::Bruvo.distance, progress = TRUE,
all.distances=TRUE)
?Bruvo.distance
distances <- polysat::meandistance.matrix(FJHoma_genambig,
samples = polysat::Samples(FJHoma_genambig),
loci = polysat::Loci(FJHoma_genambig),
#distmetric = polysat::Bruvo.distance,
progress = TRUE,
all.distances=TRUE)
###### c. Shannon's Index ####
install.packages("ShannonGen")
###### c. Shannon's Index ####
if (!"devtools" %in% installed.packages()) install.packages("devtools")
devtools::install_github("konopinski/Shannon")
library(ShannonGen)
??ShannonGen
TEST <- ShannonGen::Shannon.gen(FjHoma_genInd, estimator = c("z", "sh"))
TEST
TEST$Shannon_1949
View(TEST$Shannon_1949)
View(TEST$Zahl_1977)
install.packages("SpadeR")
library(SpadeR)
??SpadeR
?Diversity
TEST <- ShannonGen::Shannon.gen(FjHoma_genInd, estimator = c("z", "sh"))
TEST$Zahl_1977
FjHoma_genInd
FjHoma_genInd@pop
gInd = FjHoma_genInd
estimator = c("z", "sh")
MLE = function(X) {
X = X[X > 0]
n = sum(X)
-sum(X/n * log(X/n))
}
MLE
Z = function(X) {
X = X[X > 0]
Y = X[X > 1]
n = sum(X)
-n * sum(X/n * log(X/n)) - (n - 1)/n * sum((n - X) *
(-X/(n - 1) * log(X/(n - 1)))) - (n - 1)/n * sum(-Y *
(Y - 1)/(n - 1) * log((Y - 1)/(n - 1)))
}
CS = function(X) {
x = X
x = x[x > 0]
n = sum(x)
f1 = sum(x == 1)
C_head = 1 - f1/n
a = -sum(C_head * (x/n) * log(C_head * (x/n))/(1 - (1 -
C_head * (x/n))^n))
a
}
Ch = function(X) {
x = X
x = x[x > 0]
n = sum(x)
UE <- sum(x/n * (digamma(n) - digamma(x)))
f1 <- sum(x == 1)
f2 <- sum(x == 2)
if (f1 > 0) {
A <- 1 - ifelse(f2 > 0, (n - 1) * f1/((n - 1) *
f1 + 2 * f2), (n - 1) * f1/((n - 1) * f1 + 2))
B = sum(x == 1)/n * (1 - A)^(-n + 1) * (-log(A) -
sum(sapply(1:(n - 1), function(k) {
1/k * (1 - A)^k
})))
}
if (f1 == 0) {
B = 0
}
if (f1 == 1 & f2 == 0) {
B = 0
}
UE + B
}
inputs <- lapply(adegenet::seppop(gInd), function(i) sapply(adegenet::seploc(i),
function(j) colSums(j@tab, na.rm = TRUE)))
inputs
gInd
View(gInd$tab)
out <- list()
out
if (is.null(estimator))
estimator <- "z"
for (i in estimator) {
if (i %in% c("z", "sh", "cs", "ch"))
print(paste(i, "Letter code OK"))
else {
print(paste("Wrong letter code:", i))
stop("<estimator> option is not correct. \n          For details see help: ?Shannon.gen")
}
}
if ("sh" %in% estimator) {
out[["Shannon_1949"]] <- as.data.frame(lapply(inputs,
function(i) sapply(i, MLE)))
}
out
inputs
if ("z" %in% estimator) {
out[["Zahl_1977"]] <- as.data.frame(lapply(inputs, function(i) sapply(i,
Z)))
}
out
if ("ch" %in% estimator) {
out[["Chao_et_al_2013"]] <- as.data.frame(lapply(inputs,
function(i) sapply(i, Ch)))
}
out
inputs
FjHoma
# Data can be visualised here, but what a mess!
# plot(FjHoma)
# Set locus name because why not
(apex::setLocusNames(FjHoma) <- "COI")
# Create genind object
FjHoma_genInd <- apex::multidna2genind(FjHoma, mlst = TRUE)
FjHoma_genInd
?multidna2genind
# Create genind object
FjHoma_genInd <- apex::multidna2genind(FjHoma, mlst = FALSE,
genes = "COI")
FjHoma_genInd
FjHoma_genInd$tab
# Create genind object
FjHoma_genInd <- apex::multidna2genind(FjHoma, mlst = FALSE,
genes = "COI")
##### 1.2 Prep. occurrences + DNA ####
# Read in the occurrence data
OccData <- readr::read_csv(paste0(RootPath, "/HomalictusCollectionData_2018.csv"),
col_types = readr::cols(.default = "c"))
# Match the species to the collection data
matched <- OccData %>%
dplyr::right_join(tibble::tibble(labels = FjHoma@labels,
# Set rownumbers to sort by
rownum = row_number(FjHoma@labels)),
by = c("Sequence_name" = "labels")) %>%
# Sort the matched occs
dplyr::arrange(rownum)
# Add the species names and codes to the genind object
strata(FjHoma_genInd) <- matched %>%
# select wanted columns
dplyr::select(Specimen_code, Species_name) %>%
# Make new tibble with this info
dplyr::rename(
sequence = Specimen_code,
populations = Species_name) %>%
dplyr::mutate(species = populations) %>%
data.frame()
setPop(FjHoma_genInd) <- ~populations
?import2genind
adegenet::import2genind("2018_Fiji_Homalictus.fasta")
?df2genind
adegenet::df2genind(FjHoma)
adegenet::fasta2DNAbin("2018_Fiji_Homalictus.fasta")
fasta2DNAbin
?fasta2DNAbin
# Import to genind using adegenet
FjHoma_genInd_ade <- adegenet::fasta2DNAbin("2018_Fiji_Homalictus.fasta",
snpOnly = FALSE,
chunkSize = 10)
FjHoma_genInd_ade
FjHoma_genInd_ade
# Add the species names and codes to the genind object
strata(FjHoma_genInd_ade) <- matched %>%
# select wanted columns
dplyr::select(Specimen_code, Species_name) %>%
# Make new tibble with this info
dplyr::rename(
sequence = Specimen_code,
populations = Species_name) %>%
dplyr::mutate(species = populations) %>%
data.frame()
FjHoma_genInd_ade$
FjHoma_genInd_ade@pop
class(FjHoma_genInd_ade)
FjHoma_DNAbin_ade <- FjHoma_genInd_ade
FjHoma_genInd_ade <- adegenet::DNAbin2genind(FjHoma_DNAbin_ade)
FjHoma_genInd_ade
# Add the species names and codes to the genind object
strata(FjHoma_genInd_ade) <- matched %>%
# select wanted columns
dplyr::select(Specimen_code, Species_name) %>%
# Make new tibble with this info
dplyr::rename(
sequence = Specimen_code,
populations = Species_name) %>%
dplyr::mutate(species = populations) %>%
data.frame()
setPop(FjHoma_genInd) <- ~populations
FjHoma_genInd
setPop(FjHoma_genInd_ade) <- ~populations
FjHoma_genInd_ade
FjHoma_genInd_ade$pop
TEST <- ShannonGen::Shannon.gen(gInd = FjHoma_genInd, estimator = c("z", "sh"))
TEST
TEST$Shannon_1949
View(TEST$Shannon_1949)
inputs
?seppop
?seploc
inputs
?DartR
??DartR
lapply(adegenet::seppop(gInd), function(i) sapply(adegenet::seploc(i),
function(j) colSums(j@tab, na.rm = TRUE)))
?seploc
FjHoma_genInd_ade$loc.fac
FjHoma_genInd_ade$loc.n.all
FjHoma_genInd_ade
FjHoma_genInd_ade$hierarchy
FjHoma_genInd_ade$tab
View(FjHoma_genInd_ade$tab)
FjHoma_genInd_ade@strata
FjHoma_genInd_ade$all.names
locNames(FjHoma_genInd_ade) <- "COI"
locNames
?locNames
locNames(FjHoma_genInd_ade)
locNames(FjHoma_genInd_ade) <- "COI"
FjHoma_DNAbin_ade
?fasta2DNAbin
FjHoma_genInd_ade@loc.fac
FjHoma_genInd_ade@ploidy
FjHoma_genInd_ade@type
FjHoma_genInd_ade@other
FjHoma_genInd_ade@call
FjHoma_genInd_ade@pop
?DNAbin2genind
data(ralu.loci)
locNames(FjHoma_genInd_ade)
FjHoma_genInd_ade
FjHoma_genInd_ade@tab
# Convert to genind
FjHoma_genInd_ade <- adegenet::DNAbin2genind(FjHoma_DNAbin_ade,
loc.names = "COI")
?DNAbin2genind
source(paste("Shannon.gen_edit.R", sep = "/"))
source("Shannon.gen_edit.R")
source("Shannon.gen_edit.R")
TEST <- Shannon.gen_edit(gInd = FjHoma_genInd, estimator = c("z", "sh"))
TEST$Shannon_1949
inputs <- lapply(adegenet::seppop(gInd),
# Don't split by locus
#function(i) sapply(adegenet::seploc(i),
function(j) colSums(j@tab, na.rm = TRUE))#)
inputs
adegenet::seppop(gInd)
gInd@pop
inputs <- lapply(adegenet::seppop(gInd),
# Don't split by locus
function(i) sapply(adegenet::seppop(i),
function(j) colSums(j@tab, na.rm = TRUE)))
inputs
adegenet::seppop(i)
